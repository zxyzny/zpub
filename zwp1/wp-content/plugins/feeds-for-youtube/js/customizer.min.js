(()=>{"use strict";const e=function(e){return"string"!=typeof e||""===e?(console.error("The namespace must be a non-empty string."),!1):!!/^[a-zA-Z][a-zA-Z0-9_.\-\/]*$/.test(e)||(console.error("The namespace can only contain numbers, letters, dashes, periods, underscores and slashes."),!1)},t=function(e){return"string"!=typeof e||""===e?(console.error("The hook name must be a non-empty string."),!1):/^__/.test(e)?(console.error("The hook name cannot begin with `__`."),!1):!!/^[a-zA-Z][a-zA-Z0-9_.-]*$/.test(e)||(console.error("The hook name can only contain numbers, letters, dashes, periods and underscores."),!1)},o=function(o,n){return function(i,s,r,c=10){const a=o[n];if(!t(i))return;if(!e(s))return;if("function"!=typeof r)return void console.error("The hook callback must be a function.");if("number"!=typeof c)return void console.error("If specified, the hook priority must be a number.");const l={callback:r,priority:c,namespace:s};if(a[i]){const e=a[i].handlers;let t;for(t=e.length;t>0&&!(c>=e[t-1].priority);t--);t===e.length?e[t]=l:e.splice(t,0,l),a.__current.forEach((e=>{e.name===i&&e.currentIndex>=t&&e.currentIndex++}))}else a[i]={handlers:[l],runs:0};"hookAdded"!==i&&o.doAction("hookAdded",i,s,r,c)}},n=function(o,n,i=!1){return function(s,r){const c=o[n];if(!t(s))return;if(!i&&!e(r))return;if(!c[s])return 0;let a=0;if(i)a=c[s].handlers.length,c[s]={runs:c[s].runs,handlers:[]};else{const e=c[s].handlers;for(let t=e.length-1;t>=0;t--)e[t].namespace===r&&(e.splice(t,1),a++,c.__current.forEach((e=>{e.name===s&&e.currentIndex>=t&&e.currentIndex--})))}return"hookRemoved"!==s&&o.doAction("hookRemoved",s,r),a}},i=function(e,t){return function(o,n){const i=e[t];return void 0!==n?o in i&&i[o].handlers.some((e=>e.namespace===n)):o in i}},s=function(e,t,o=!1){return function(n,...i){const s=e[t];s[n]||(s[n]={handlers:[],runs:0}),s[n].runs++;const r=s[n].handlers;if(!r||!r.length)return o?i[0]:void 0;const c={name:n,currentIndex:0};for(s.__current.push(c);c.currentIndex<r.length;){const e=r[c.currentIndex].callback.apply(null,i);o&&(i[0]=e),c.currentIndex++}return s.__current.pop(),o?i[0]:void 0}},r=function(e,t){return function(){var o;const n=e[t];return null!==(o=n.__current[n.__current.length-1]?.name)&&void 0!==o?o:null}},c=function(e,t){return function(o){const n=e[t];return void 0===o?void 0!==n.__current[0]:!!n.__current[0]&&o===n.__current[0].name}},a=function(e,o){return function(n){const i=e[o];if(t(n))return i[n]&&i[n].runs?i[n].runs:0}};class l{constructor(){this.actions=Object.create(null),this.actions.__current=[],this.filters=Object.create(null),this.filters.__current=[],this.addAction=o(this,"actions"),this.addFilter=o(this,"filters"),this.removeAction=n(this,"actions"),this.removeFilter=n(this,"filters"),this.hasAction=i(this,"actions"),this.hasFilter=i(this,"filters"),this.removeAllActions=n(this,"actions",!0),this.removeAllFilters=n(this,"filters",!0),this.doAction=s(this,"actions"),this.applyFilters=s(this,"filters",!0),this.currentAction=r(this,"actions"),this.currentFilter=r(this,"filters"),this.doingAction=c(this,"actions"),this.doingFilter=c(this,"filters"),this.didAction=a(this,"actions"),this.didFilter=a(this,"filters")}}const u=new l,{addAction:d,addFilter:h,removeAction:f,removeFilter:m,hasAction:p,hasFilter:g,removeAllActions:b,removeAllFilters:y,doAction:_,applyFilters:v,currentAction:F,currentFilter:S,doingAction:w,doingFilter:A,didAction:P,didFilter:k,actions:C,filters:z}=u;function D(e){return D="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},D(e)}function x(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,n)}return o}function E(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?x(Object(o),!0).forEach((function(t){var n,i,s,r;n=e,i=t,s=o[t],r=function(e,t){if("object"!=D(e)||!e)return e;var o=e[Symbol.toPrimitive];if(void 0!==o){var n=o.call(e,"string");if("object"!=D(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(i),(i="symbol"==D(r)?r:r+"")in n?Object.defineProperty(n,i,{value:s,enumerable:!0,configurable:!0,writable:!0}):n[i]=s})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):x(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}SB_Customizer.initPromise=new Promise((function(e){SB_Customizer.extraData=E(E({},SB_Customizer.extraData),{},{allFeedsScreen:sbc_builder.allFeedsScreen,feedsList:sbc_builder.feeds,legacyFeedsList:sbc_builder.legacyFeeds,tooltipContent:sbc_builder.feedtypesTooltipContent,feedSettingsDomOptions:null,selectedFeedModel:{channel:sbc_builder.prefilledChannelId,playlist:"",favorites:sbc_builder.prefilledChannelId,search:"",live:sbc_builder.prefilledChannelId,single:"",apiKey:"",accessToken:""},youtubeAccountConnectURL:sbc_builder.youtubeAccountConnectURL,connectSiteParameters:sbc_builder.youtubeAccountConnectParameters,prefilledChannelId:sbc_builder.prefilledChannelId,dismissLite:sbc_builder.youtube_feed_dismiss_lite,shouldShowFeedAPIForm:!1,shouldShowManualConnect:!1,showShowYTAccountWarning:!1,sw_feed:!1,sw_feed_id:!1}),SB_Customizer.extraMethods=E(E({},SB_Customizer.extraMethods),{},{changeSettingValue:function(e,t){var o=arguments.length>3&&void 0!==arguments[3]&&arguments[3],n=this;(!(arguments.length>2&&void 0!==arguments[2])||arguments[2])&&(n.customizerFeedData.settings[e]=t),!1!==o&&n.customizerControlAjaxAction(o,e),n.regenerateLayout(e)},checkExtensionActive:function(e){return this.activeExtensions[e]},shouldShowOverlay:function(e){var t=this;return t.sbyIsPro&&!t.sbyLicenseNoticeActive&&("call_to_action"!=e.checkExtensionPopup&&"advancedFilters"!=e.checkExtensionPopup||t.hasFeature("call_to_actions")&&t.hasFeature("advancedFilters"))?(null!=e.condition||null!=e.checkExtension||null!=e.checkExtensionDimmed)&&!t.checkControlCondition(e.condition,e.checkExtension,e.checkExtensionDimmed):null!=e.checkExtensionPopup||(null!=e.condition||null!=e.checkExtension||null!=e.checkExtensionDimmed)&&!t.checkControlCondition(e.condition,e.checkExtension,e.checkExtensionDimmed)},shouldShowTogglesetCover:function(e){var t=this;return!(t.sbyIsPro&&!t.sbyLicenseNoticeActive||null==e.checkExtension||t.checkExtensionActive(e.checkExtension))},togglesetExtPopup:function(e){this.viewsActive.extensionsPopupElement=e.checkExtension},regenerateLayout:function(e){var t=this;["layout","carouselarrows","carouselpag","carouselautoplay","carouseltime","carouselloop","carouselrows","cols","colstablet","colsmobile","imagepadding"].includes(e)&&setTimeout((function(){t.setShortcodeGlobalSettings(!0)}),200)},backToAllFeeds:function(){var e=this;JSON.stringify(e.customizerFeedDataInitial)===JSON.stringify(e.customizerFeedData)?window.location=e.builderUrl:e.openDialogBox("backAllToFeed")},openDialogBox:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[],o=this,n=o.dialogBoxPopupScreen[e].heading,i=o.dialogBoxPopupScreen[e].description,s=o.dialogBoxPopupScreen[e].customButtons;"deleteSingleFeed"===e&&(o.feedToDelete=t,n=n.replace("#",o.feedToDelete.feed_name)),o.dialogBox={active:!0,type:e,heading:n,description:i,customButtons:s},window.event.stopPropagation()},confirmDialogAction:function(){var e=this;switch(e.dialogBox.type){case"deleteSingleFeed":e.feedActionDelete([e.feedToDelete.id]);break;case"deleteMultipleFeeds":e.feedActionDelete(e.feedsSelected);break;case"backAllToFeed":window.location=e.builderUrl}},feedActionDelete:function(e){var t=this,o={action:"sby_feed_saver_manager_delete_feeds",feeds_ids:e};t.ajaxPost(o,(function(e){var o=e.data;t.feedsList=Object.values(Object.assign({},o)),t.feedsSelected=[]}))},showColorPickerPospup:function(e){this.customizerScreens.activeColorPicker=e},hideColorPickerPopup:function(){this.customizerScreens.activeColorPicker=null},getPaletteClass:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",t=this,o=t.customizerFeedData.settings.colorpalette;if(t.checkNotEmpty(o)){var n="custom"===o?"_"+t.customizerFeedData.feed_info.id:"";return console.log("inherit"!==o?" sby"+e+"_palette_"+o+n:""),"inherit"!==o?" sby"+e+"_palette_"+o+n:""}return""},checkNotEmpty:function(e){return null!=e&&""!=e.replace(/ /gi,"")},getFeedContainerClasses:function(){var e=this;return["sb_youtube","sby_layout_"+e.customizerFeedData.settings.layout,"sby_col_"+e.getColSettings(),"sby_mob_col_"+e.getMobColSettings(),"sby_palette_"+e.getColorPaletteClass()].join(" ")},getColorPaletteClass:function(){var e=this;return"custom"==e.customizerFeedData.settings.colorpalette?e.customizerFeedData.settings.colorpalette+"_"+e.customizerFeedData.feed_info.id:e.customizerFeedData.settings.colorpalette},getColSettings:function(){var e=this;return"list"==e.customizerFeedData.settings.layout||"mobile"===e.customizerScreens.previewScreen?0:e.customizerFeedData.settings.cols?e.customizerFeedData.settings.cols:0},getMobColSettings:function(){var e=this;return"list"==e.customizerFeedData.settings.layout?0:e.customizerFeedData.settings.colsmobile?e.customizerFeedData.settings.colsmobile:0},checkShouldShowSubscribers:function(){return 1==this.customizerFeedData.settings.showsubscribe?"shown":""},valueIsEnabled:function(e){return 1==e||1==e||"true"==e||"on"==e},changeSwitcherSettingValue:function(e,t,o){var n=arguments.length>3&&void 0!==arguments[3]&&arguments[3],i=arguments.length>4?arguments[4]:void 0,s=this;console.log(i),Object.keys(s.inActiveExtensions).includes(e)&&(s.viewsActive.extensionsPopupElement=s.inActiveExtensions[e]),s.customizerFeedData.settings[e]=s.customizerFeedData.settings[e]==t?o:t,!1!==n&&s.customizerControlAjaxAction(n),s.regenerateLayout(e)},jsonParse:function(e){try{return JSON.parse(e)}catch(e){return!1}},getCustomHeaderText:function(){return this.customizerFeedData.settings.customheadertext},shouldShowStandardHeader:function(){return this.customizerFeedData.settings.showheader&&"standard"===this.customizerFeedData.settings.headerstyle},shouldShowTextHeader:function(){return this.customizerFeedData.settings.showheader&&"text"===this.customizerFeedData.settings.headerstyle},getFlagsAttr:function(){var e=this,t=[];return e.customizerFeedData.settings.disable_resize&&t.push("resizeDisable"),e.customizerFeedData.settings.favor_local&&t.push("favorLocal"),e.customizerFeedData.settings.disable_js_image_loading&&t.push("imageLoadDisable"),e.customizerFeedData.settings.ajax_post_load&&t.push("ajaxPostLoad"),"3:4"===e.customizerFeedData.settings.playerratio&&t.push("narrowPlayer"),e.customizerFeedData.settings.disablecdn&&t.push("disablecdn"),t.toString()},shouldShowPlayer:function(){if("gallery"==this.customizerFeedData.settings.layout)return!0},switchToVideosSection:function(){var e=this;e.customizerScreens.parentActiveSection=null,e.customizerScreens.parentActiveSectionData=null,e.customizerScreens.activeSection="customize_videos",e.customizerScreens.activeSectionData=e.customizerSidebarBuilder.customize.sections.customize_videos},setShortcodeGlobalSettings:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0],t=this,o=jQuery("html").find(".sb_youtube"),n=t.jsonParse(o.attr("data-options")),i=t.customizerFeedData.settings;if(o.length){if("carousel"===i.layout){var s=t.valueIsEnabled(i.carouselarrows),r=t.valueIsEnabled(i.carouselpag),c=t.valueIsEnabled(i.carouselautoplay),a=!!c&&parseInt(i.carouseltime),l=!t.checkNotEmpty(i.carouselloop)||"rewind"===i.carouselloop,u=i.carouselrows?Math.min(parseInt(i.carouselrows),2):1;delete n.gallery,delete n.masonry,delete n.grid,n.carousel=[s,r,c,a,l,u]}else"grid"==i.layout?(delete n.gallery,delete n.masonry):"masonry"==i.layout?(delete n.gallery,delete n.grid):"gallery"==i.layout&&(delete n.masonry,delete n.grid);"carousel"!==i.layout&&delete n.carousel,o.attr("data-options",JSON.stringify(n)),void 0!==window.sby_init&&e&&window.sby_init()}},showManualConnect:function(){this.shouldShowManualConnect=!0,this.shouldShowFeedAPIBackBtn=!0},showFeedSourceManualConnect:function(){this.viewsActive.accountAPIPopup=!0,this.shouldShowManualConnect=!0},showAPIConnectForm:function(){this.shouldShowFeedAPIForm=!0,this.shouldShowFeedAPIBackBtn=!0},showYTAccountLimitations:function(){this.showShowYTAccountWarning=!0},backToApiPopup:function(){var e=this;e.showShowYTAccountWarning=!1,e.shouldShowManualConnect=!1,e.shouldShowFeedAPIForm=!1,e.shouldShowFeedAPIBackBtn=!1},hideAPIConnectForm:function(){var e=this;e.shouldShowManualConnect=!1,e.shouldShowFeedAPIForm=!1,e.shouldShowFeedAPIBackBtn=!1},addAPIKey:function(){if((e=this).selectedFeedModel.apiKey){var e,t={action:"sby_add_api_key",api:(e=this).selectedFeedModel.apiKey};e.apiKeyBtnLoader=!0,e.ajaxPost(t,(function(t){t.data,e.apiKeyBtnLoader=!1,e.apiKeyError=!1,e.apiKeyStatus=!0,e.activateView("accountAPIPopup")}))}else e.apiKeyError=!0},addAccessToken:function(){if((e=this).selectedFeedModel.accessToken){var e,t={action:"sby_manual_access_token",sby_access_token:(e=this).selectedFeedModel.accessToken};e.apiKeyBtnLoader=!0,e.ajaxPost(t,(function(t){t.data,e.apiKeyBtnLoader=!1,e.accessTokenError=!1,e.apiKeyStatus=!0,e.activateView("accountAPIPopup")}))}else e.accessTokenError=!0},submitNewFeed:function(){var e=this,t={action:"sby_feed_saver_manager_builder_update",feedtype:e.selectedFeed,feedtemplate:e.selectedFeedTemplate,selectedFeedModel:e.selectedFeedModel,new_insert:"true"};e.fullScreenLoader=!0,e.ajaxPost(t,(function(t){var o=t.data;o.feed_id&&o.success&&(window.location=e.builderUrl+"&feed_id="+o.feed_id+e.sw_feed_params())}))},fieldCustomClickAction:function(e){"clearCommentCache"===e&&this.clearCommentCache()},clearCommentCache:function(){var e=this;e.loadingBar=!0,e.ajaxPost({action:"sby_feed_saver_clear_comments_cache"},(function(t){"success"===t.data?e.processNotification("commentCacheCleared"):e.processNotification("unkownError")}))}}),e(SB_Customizer)}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,